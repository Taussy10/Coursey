import {
  View,
  Text,
  TextInput,
  Button,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from 'react-native';
import React from 'react';
import { router } from 'expo-router';
import { aiModel, generateCourseAi } from '~/src/ai/ai';
import prompt from '~/src/ai/prompt';
import { useState } from 'react';
import { jsonrepair } from 'jsonrepair';
import { addDataDb, config } from '~/src/appwrite/appwrite';

const CreateCourse = () => {
  const [loading, setLoading] = useState(false);
  const [loadingCourse, setLoadingCourse] = useState(false);
  const [topic, setTopic] = useState([
    'Introduction to Python Programming',
    'Data Structures and Algorithms in Python',
    'Python for Data Science and Machine Learning',
    'Web Development with Python and Django',
    'Automation and Scripting with Python',
    'Object-Oriented Programming in Python',
    'Python for Cybersecurity and Ethical Hacking',
  ]);
  const [generateCourse, setGenerateCourse] = useState([]);
  //  want to store in array of topic selected
  //  const [selectedTopics, setSelectedTopics] = useState([])
  const [storeSelectedTopic, setStoreSelectedTopic] = useState([]);
  //  console.log("TOPIC :",topic);
  //  console.log("TOPIC TYPEOf  :",typeof topic);

// console.log(
// "coures", config.coursesCollectionId,
//  "chapters", config.chaptersCollectionId,
// "chaptestopcis",config.chaptersTopicsCollectionId,
// "flashcards",config.flashcardsCollectionId,
// "qna",config.chaptersQnaCollectionId,
// "quizzes",config.chaptersQuizzesCollectionId);
  
  const selectedTopics = (item: string) => {
    console.log('Selected item :', item);

    // this set is function in which we are passing props then
    // destrcute it then adding data just a basic js
    // make sure that there are not duplicates
    if (!storeSelectedTopic.includes(item)) {
      setStoreSelectedTopic((prev) => [...prev, item]);
    } else {
      setStoreSelectedTopic((storedItems) => storedItems.filter((t) => t !== item));
    }
    console.log('stored Topics:', storeSelectedTopic);

    // now we need to store it in useState so that we can implement background color change
  };

  const onGenerateCourse = async () => {
    setLoadingCourse(true);
    try {
      const response = await generateCourseAi('Python' + prompt.COURSE);
      console.log('Response Topic generated by AI :', response);
      // this reparedJSOn if for repairing json
      const repairedJson = await jsonrepair(response);
      // console.log('repairedJson :', typeof repairedJson);
      // Don't foreget to convert in json object
      // create a variable to store parsed JSON so that you can send in addDataDb
      const parsedCourse = JSON.parse(repairedJson)
      setGenerateCourse(parsedCourse);

          // const courseData = await repairedJson?.courses
      // console.log("COursedData :",courseData);
      
      // const addDb = await addDataDb([courseData])
      const addDb = await addDataDb(parsedCourse)
      console.log("addDB :",addDb);
    } catch (error) {
      console.log('Error from onGenerateCourse funtion error', error);
      Alert.alert('Error', 'Failed to Generate Course');
    } finally {
      setLoadingCourse(false);
    }
  };
  // This should be array, object 
      console.log('GENERATED COURSE with courses :', generateCourse?.courses);
// const course = generateCourse?.courses
// // this for each runs a loop on array then return array one by one and it's diff from map method that it doesn't new array
//       course?.forEach(element => {
//         console.log("ELMEN :",element);
        
//       });
  const onGenerateTopic = async () => {
    setLoading(true);
    try {
      setLoading(true);
      const response = await aiModel('Python' + prompt.IDEA);
      console.log('Response Topic generated by AI :', response);
      // this reparedJSOn if for repairing json
      const repairedJson = await jsonrepair(response);
      // console.log('repairedJson :', typeof repairedJson);

      // Don't foreget to convert in json object
      setTopic(JSON.parse(repairedJson));
    } catch (error) {
      console.log('Error from generatTopic funtion error', error);
      Alert.alert('Error', 'Failed to Generate Topics');
    } finally {
      setLoading(false);
    }
    // console.log("hello");
  };
  return (
    <View>
      <Text>CreateCourse</Text>
      <TextInput
        placeholder={'Write your text'}
        // value= 'Write your text'

        // This textinput is for online one line
        // numberOfLines={3}
        multiline={true}
        numberOfLines={4}
        // SOMETIMES ClassName height width props
        // have some problem in TextInput so
        // it takes time to execute
        // so for this use Style
        // style={{height: 100, }}

        // when you add height then cursor will start from middle
        // so use align-top to alig ing it top
        className=" mb-6 h-28    rounded-2xl border bg-white align-top  text-black"
      />
      {/* Add activity indicator */}

      {/* While generating disable the button */}
      <TouchableOpacity
        onPress={onGenerateTopic}
        disabled={loading}
        className="  items-center  justify-center  bg-green-500 p-2">
        {loading ? (
          <ActivityIndicator size={'small'} color={'blue'} />
        ) : (
          <Text className="font-roboto- rounded-xl text-2xl text-white">Create Topic </Text>
        )}
      </TouchableOpacity>

      {/* what ? I want that this JSX code should show on screen 
How? Basically in React code execute line by line when it reaches to this 
// code then will see is this function returning anything ?yeah then 
// it will show this code 

*/}
      {/* In life you will 
get a lot of times this kinda error then remind yourself 
that map metod works only for array and your json must be strinigify json so
 convert in JSON object by parsing it
 TypeError: topic?.map is not a function
(because .map() doesnâ€™t work on strings
 */}

      {/* Container for all the topics */}
      <View className="mb-6">
        {topic?.map((item, index) => {
          // console.log("ITems :",item);
          // This map method runs a loop over
          // array then returns it's indexes in a key called index
          // then you have to provide key to conatiner so that it map
          // method know that this to render basically for performance
          // console.log("Index :",index);

          return (
            // You need this view
            //  cause key can be use only in vew props
            // otherwise it has no use
            // btw it's container for each time
            // which is also that touchable so no use
            <View key={index}>
              {/* I didn't know that if yu write here w-40 then 
        it will only take space till 40 */}
              <TouchableOpacity
                onPress={() => selectedTopics(item)}
                //  onPress={() => onTopicSelect(topic)}
                //  className={` border mb-3 p-1.5 rounded-2xl ${isTopicSelected()? 'bg-blue-600': 'bg-red-600'} `}>
                //  className={` border mb-3 p-1.5 rounded-2xl ${isTopicSelected()? 'bg-blue-600': 'bg-red-600'} `}>
                // For knowing the topic is choosen or not ?

                className={` mb-3 rounded-2xl border p-1.5 ${storeSelectedTopic.includes(item) ? 'bg-blue-600' : 'bg-red-600'} `}>
                <Text className="font-roboto-semibold text-black" numberOfLines={1}>
                  Topic {item}
                </Text>
              </TouchableOpacity>
            </View>
          );
        })}
      </View>

      {/* this button will show only when user have got some topics so  */}
      {selectedTopics.length && (
        <TouchableOpacity
          onPress={onGenerateCourse}
          disabled={loadingCourse}
          className="  items-center  justify-center  bg-green-500 p-2">
          {loadingCourse ? (
            <ActivityIndicator size={'small'} color={'blue'} />
          ) : (
            <Text className="font-roboto- rounded-xl text-2xl text-white">Create Courses </Text>
          )}
        </TouchableOpacity>
      )}
    </View>
  );
};

export default CreateCourse;
